// class Solution {
// public:
//     int BS(vector<int> &nums , int start , int end , int target)
//     {
//         while (start <= end)
//         {
//             int mid = (start + end) / 2;

//             if (nums[mid] == target)
//             {
//                 return mid;
//             }

//             else if (nums[mid] < target)
//             {
//                 start = mid + 1;
//             }
//             else
//             end = mid -1;
//         }
//         return -1;
//     }
//     int search(vector<int>& nums, int target) {
//         int n = nums.size();
//         if (n == 0)
//         {
//             return -1;
//         }

//         if (n == 1)
//         {
//             if (nums[0] == target)
//             return 0;
//             else
//             return -1;
//         }

//         //finding the piviot
//         int piv;
//         int s = 0;
//         int e = n-1;
//         if (nums[s] < nums[e])
//         {
//             piv = e;
//         }
//         else{
//         while(s <= e)
//         {
//             int m = (s+e)/2;
//             if(nums[m+1] < nums[m])
//             {
//                 piv = m;
//                 break;
//             }
//             else if(nums[m] > nums[e])
//             {
//                 s = m+1;
//             }
//             else if (nums[m] < nums[e])
//             {
//                 e = m-1;
//             }
//         }
//         }

//         if (nums[piv] == target)
//         {
//             return piv;
//         }

//         int start = 0;
//         int end = n-1;
//         if (nums[0] > target)
//         {
//             start = piv+1;
//         }
//         else
//         end = piv -1;

//         return BS(nums , start , end , target);
//     }
// };

class Solution {
public:
    int search(vector<int>& nums, int target) {

        int n = nums.size();
        int s = 0;
        int e = n-1;
        int m;

        // while (s <= e)
        // {
        //     m = (s+e) / 2;

        //     if (nums[m] == target)
        //     {
        //         return m;
        //     }
        //     else if (nums[m] > target)
        //     {
        //         if (nums[e] >= target && nums[s] > target)
        //         {
        //             s = m+1;
        //         }
        //         else
        //         e = m-1;
        //     }
        //     else
        //     {
        //         if (nums[s] >= target && nums[e] >= target)
        //         {
        //             s = m+1;
        //         }
        //         else
        //         e = m-1;
        //     }
        // }

        while (s <= e)
        {
            m = (s+e) /2;

            if (nums[m] == target)
            {
                return m;
            }

            if (nums[m] >= nums[s])
            {
                if (target >= nums[s] && target < nums[m])
                {
                    e = m-1;
                }
                else
                {
                    s = m+1;
                }
            }
            else
            {
                if (target <= nums[e] && target > nums[m])
                {
                    s = m+1;
                }
                else
                {
                    e = m-1;
                }
            }
        }
        return -1;
    }
};
