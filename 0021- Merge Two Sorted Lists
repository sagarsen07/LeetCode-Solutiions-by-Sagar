/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* solve (ListNode* first , ListNode* second)
    {
        ListNode* ptr1 = first;
        ListNode* ptr2 = second;

        ListNode* next1 = ptr1->next;
        ListNode* next2 = ptr2->next;

        if (next1 == NULL)
        {
            ptr1->next = ptr2;
            return first;
        }

        while (next1 != NULL && ptr2 != NULL)
        {
            if(ptr1->val <= ptr2->val && ptr2->val <= next1->val)
            {
                ptr1->next = ptr2;
                next2 = ptr2->next;
                ptr2->next = next1;
                ptr2 = next2;
                ptr1 = ptr1->next;
                next1 = ptr1->next;

            }
            else
            {
                ptr1 = ptr1->next;
                next1 = ptr1->next;

                 if (next1 == NULL)
                {
                    ptr1->next = ptr2;
                    return first;
                }
            }
        }
        return first;
    }
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if (list1 == NULL && list2 != NULL)
        {
            return list2;
        }

        else if (list1 != NULL && list2 == NULL)
        {
            return list1;
        }

        else if (list1 == NULL && list2 == NULL)
        {
            return list1;
        }

        else
        {
            if (list1->val <= list2->val)
            return solve(list1 , list2);
            else
            return solve(list2 , list1);
        }
        
    }
};
